The Model Layer
+++++++++++++++

Introduction to models
----------------------

By default, the configuration uses SQLite. If you’re new to databases, or you’re just interested in trying Django, this is the easiest choice. SQLite is included in Python, so you won’t need to install anything else to support your database. 

Field types
-----------

* ``CharField`` : A string field for small strings. Also it requires the maximum length of the string as an argument.
* ``DateTimeField`` : A date and time, represented in Python.
* ``IntegerField`` : An integer. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.
* ``DecimalField`` : A fixed-precision decimal number, represented in Python by a Decimal instance. Has two required arguments

 **DecimalField.max_digits** : The maximum number of digits allowed in the number. Note that this number must be greater than or equal to decimal_places.

 **DecimalField.decimal_places** : The number of decimal places to store with the number.

* ``EmailField`` : A CharField that checks that the value is a valid email address. It uses EmailValidator to validate the input.
* ``ImageField`` : Inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.
* ``TextField`` : A large text field.

For more field types check the official documentation `here <https://docs.djangoproject.com/en/2.0/ref/models/fields/#django.db.models.DateField/>`_.

Indexes
-------

* ``PrimaryKey`` : In django an id field is added automatically acting as a primary key. Of course his behavior can be overridden.
* ``ForeignKey`` : To define a many-to-one relationship, use **django.db.models.ForeignKey**. You use it just like any other Field type: by including it as a class attribute of your model.

Building our own models
-----------------------

.. image:: database.png

The ``models.py`` file must look like this : ::

 from django.db import models

 # Create your models here.
 class User(models.Model):
 	username = models.CharField(max_length=45)
 	password = models.CharField(max_length=45)
 	email = models.EmailField()
	balance = models.DecimalField(max_digits=6, decimal_places=2)
	firstname = models.CharField(max_length=56)
	lastname = models.CharField(max_length=45)
	cellphone = models.CharField(max_length=14)
	address = models.CharField(max_length=255)
	town = models.CharField(max_length=45)
	post_code = models.CharField(max_length=45)
	country = models.CharField(max_length=45)

 class Product(models.Model):
	title = models.CharField(max_length=255)
	image = models.ImageField()
	description = models.CharField(max_length = 500)
	quantity = models.IntegerField()
	date_posted = models.DateTimeField(auto_now_add=True, blank=True)

 class Auction(models.Model):
	product_id = models.ForeignKey(Product, on_delete=models.CASCADE)
	number_of_bids = models.IntegerField()
	time_starting = models.DateTimeField()
	time_ending = models.DateTimeField()

 class Wishlist(models.Model):
	user_id = models.ForeignKey(User, on_delete=models.CASCADE)
	auction_id = models.ForeignKey(Auction, on_delete=models.CASCADE)

 class Bid(models.Model):
	user_id = models.ForeignKey(User, on_delete=models.CASCADE)
	auction_id = models.ForeignKey(Auction, on_delete=models.CASCADE)
	bid_time = models.DateTimeField()

 class Chat(models.Model):
	auction_id = models.ForeignKey(Auction, on_delete=models.CASCADE)
	user_id = models.ForeignKey(User, on_delete=models.CASCADE)
	message = models.TextField()
	time_sent = models.DateTimeField()

Shell
-----

Now, we can use an interactive Python shell that API Django gives you. 
To invoke the Python shell, use this command: ::

 >> $ python manage.py shell

We should see the following text: ::

 Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32
 Type "help", "copyright", "credits" or "license" for more information.
 (InteractiveConsole)
 >>>
 
Using the shell we will create a new user for our website. Running the following commands: ::

 >>> from website.models import User
 >>> # Creates an User object.
 >>> user1 = User()
 >>> user1.username = "dummy1"
 >>> user1.email = "dummy1@mail.com"
 >>> user1.password = "dummypassword"
 >>> user1.balance = 20.0
 >>> user1.firstname = "Dummy"
 >>> user1.lastname = "One"
 >>> user1.cellphone = "6988757575"
 >>> user1.address = "Dumadd 199"
 >>> user1.town = "Dummtown"
 >>> user1.post_code = "35100"
 >>> user1.country = "Dummcon"
 >>> # Saves User object to the database.
 >>> user1.save()

If we want to check if the user was successfully registered we execute this command: ::

 >>> User.objects.all()
 <QuerySet [<User: User object (1)>]>

The result we get is quite unclear. Lets fix it by opening the models.py file and adding a **__str__()** method to User class ::

 class User(models.Model):
    ...
    
    def __str__(self):
        return "(" + self.username + ", " + self.email + ")"


Now lets execute again the previous command: ::

 >>> User.objects.all()
 <QuerySet [<User: (dummy1, dummy1@mail.com)>]>
